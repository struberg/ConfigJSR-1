//
// Copyright (c) 2016-2017 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Contributors:
// Mark Struberg
// Emily Jiang
// John D. Ament
// Sebastian Daschner

[[converter]]
== Converter

For providing typeseafe configuration we need to convert from the configured Strings into target types.
This happens by providing `Converter` s in the `Config`.

=== Built-in Converters

The following `Converter` s are provided by JavaConfig by default:

* `Enum` types, which are converted using `Enum#valueOf(Class, String)`.
* `boolean` and `java.lang.Boolean`, values for `true` are (case insensitive): "true", "1", "yes", "y" "on".
  Any other value will be interpreted as `false`.
* `int` and `java.lang.Integer`
* `long` and `java.lang.Long`
* `float` and `java.lang.Float`, a dot '.' is used to separate the fractional digits
* `double` and `java.lang.Double`, a dot '.' is used to separate the fractional digits
* `java.time.Duration`, as defined in `java.time.Duration#parse(CharSequence)`
* `java.time.LocalTime`, as defined in `java.time.LocalTime#parse(CharSequence)`
* `java.time.LocalDate`, as defined in `java.time.LocalDate#parse(CharSequence)`
* `java.time.LocalDateTime`, as defined in `java.time.LocalDateTime#parse(CharSequence)`
* `java.time.OffsetDateTime`, as defined in `java.time.OffsetDateTime#parse(CharSequence)`
* `java.time.OffsetTime`, as defined in `java.time.OffsetTime#parse(CharSequence)`
* `java.time.Instant`, as defined in `java.time.Instant#parse(CharSequence)`
* `java.net.URL`, as defined in `java.net.URL#URL(String)`
* `java.net.URI`, as defined in `java.net.URI#create(String)`

All built-in `Converter` have the `@Priority` of `1`.


=== Adding custom Converters

A custom `Converter` must implement the generic interface `javax.config.spi.Converter`.
The Type parameter of the interface is the target type the String is converted to.
You have to register your implementation in a file `/META-INF/services/javax.config.spi.Converter` with the fully qualified class name of the custom implementation.

A custom `Converter` can define a priority with the `@javax.annotation.Priority` annotation.
If a Priority annotation isn't applied, a default priority of 100 is assumed.
The `Config` will use the `Converter` with the highest `Priority` for each target type.

A custom `Converter` for a target type of any of the built-in Converters will overwrite the default Converter.


=== Implicit Converters

If no built-in nor custom `Converter` for a requested type `T` is provided, the `Config` will try to invoke Implicit Converters that are be defined on the type `T`.
The following method definitions are supported and searched with the given priority:

* The target type `T` has a Constructor with a single `String` parameter, or
* the target type `T` has a Constructor with a single `CharSequence` parameter, or
* the target type `T` has a `static T valueOf(String)` method, or
* the target type `T` has a `static T valueOf(CharSequence)` method, or
* the target type `T` has a `static T parse(String)` method, or
* the target type `T` has a `static T parse(CharSequence)` method, or
